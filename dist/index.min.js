"use strict";var _createClass=function(){function e(e,t){for(var n in t){var r=t[n];r.configurable=!0,r.value&&(r.writable=!0)}Object.defineProperties(e,t)}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),_classCallCheck=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")},CGPoint=function(){function e(){var t=void 0===arguments[0]?0:arguments[0],n=void 0===arguments[1]?0:arguments[1];_classCallCheck(this,e),this.x=t,this.y=n}return _createClass(e,{x:{get:function(){return this._x},set:function(e){e!==this._x&&(this._x=Number(e))}},y:{get:function(){return this._y},set:function(e){e!==this._y&&(this._y=Number(e))}},equalTo:{value:function(t){var n=Boolean(arguments.length),r=t instanceof e,i=n&&r;if(i){var o=Object.is(this.x,t.x),a=Object.is(this.y,t.y);return o&&a}var s="equalTo(): Expects at least 1 argument of type CGPoint",u=n?new TypeError(s):new ReferenceError(s);throw u}},toString:{value:function(){return"{"+this.x+", "+this.y+"}"}},equalToPoint:{value:function(){var t=void 0===arguments[0]?new e:arguments[0];console.warn("equalToPoint(): Deprecated. Please use equalTo()");var n=Object.is(this.x,t.x),r=Object.is(this.y,t.y);return n&&r}},get:{value:function(){return console.warn("get(): Deprecated. Use toString() or toObject() instead"),{x:this.x,y:this.y}}}}),e}(),ZERO={};ZERO.value=new CGPoint(0,0),ZERO.configurable=!1,ZERO.enumerable=!1,ZERO.writable=!1,Object.defineProperty(CGPoint,"ZERO",ZERO),module.exports=CGPoint;